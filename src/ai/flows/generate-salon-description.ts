
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview AI agent that generates a compelling salon description.
 *
 * - generateSalonDescription - A function that handles the salon description generation.
 * - GenerateSalonDescriptionInput - The input type for the generateSalonDescription function.
 * - GenerateSalonDescriptionOutput - The return type for the generateSalonDescription function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateSalonDescriptionInputSchema = z.object({
  salonName: z.string().describe('The name of the salon.'),
  serviceDescription: z.string().describe('Detailed description of the salon services.'),
  atmosphereDescription: z.string().describe('Description of the salon atmosphere.'),
  targetCustomerDescription: z.string().describe('Description of the target customer.'),
  uniqueSellingPoints: z.string().describe('Unique selling points of the salon.'),
});
export type GenerateSalonDescriptionInput = z.infer<typeof GenerateSalonDescriptionInputSchema>;

const GenerateSalonDescriptionOutputSchema = z.object({
  salonDescription: z.string().optional().describe('A compelling description of the salon.'),
  error: z.string().optional().describe('An error message if the generation failed.'),
});
export type GenerateSalonDescriptionOutput = z.infer<typeof GenerateSalonDescriptionOutputSchema>;

export async function generateSalonDescription(
  input: GenerateSalonDescriptionInput
): Promise<GenerateSalonDescriptionOutput> {
  try {
    const result = await generateSalonDescriptionFlow(input);
    // The flow itself now throws an error if the output schema is not met.
    // So, a successful result here implies salonDescription is present.
    return { salonDescription: result.salonDescription };
  } catch (e: any) {
    console.error("Error in generateSalonDescription flow execution. Type:", typeof e, "Content:", e);
    if (e instanceof Error) {
      console.error("Error name:", e.name);
      console.error("Error message:", e.message);
      console.error("Error stack:", e.stack);
    } else if (typeof e === 'object' && e !== null) {
      // Attempt to stringify, but be cautious with circular references or huge objects
      try {
        console.error("Full error object (stringified):", JSON.stringify(e, Object.getOwnPropertyNames(e), 2));
      } catch (stringifyError) {
        console.error("Could not stringify the full error object:", stringifyError);
        console.error("Fallback error toString():", e.toString());
      }
    }

    let errorMessage = "Failed to generate salon description due to an unexpected error.";
    if (e instanceof Error && typeof e.message === 'string') {
      errorMessage = e.message;
    } else if (typeof e === 'string') {
      errorMessage = e;
    } else if (e && typeof e.toString === 'function') {
      errorMessage = e.toString();
    }
    return { error: errorMessage };
  }
}

const prompt = ai.definePrompt({
  name: 'generateSalonDescriptionPrompt',
  input: {schema: GenerateSalonDescriptionInputSchema},
  output: {schema: z.object({ salonDescription: z.string().optional() })}, // Allow optional here, flow will handle if required
  prompt: `You are an expert marketing copywriter for beauty salons. Your task is to create a compelling and attractive description for a salon based on the information provided.

Salon Name: {{salonName}}
Services: {{serviceDescription}}
Atmosphere: {{atmosphereDescription}}
Target Customer: {{targetCustomerDescription}}
Unique Selling Points: {{uniqueSellingPoints}}

Write a salon description that will attract customers and highlight the unique qualities of the salon. The description should be concise, engaging, and no more than 150 words.
`,
});

const generateSalonDescriptionFlow = ai.defineFlow(
  {
    name: 'generateSalonDescriptionFlow',
    inputSchema: GenerateSalonDescriptionInputSchema,
    outputSchema: z.object({ salonDescription: z.string() }), // Flow requires a description
  },
  async (input): Promise<{ salonDescription: string }> => {
    const {output} = await prompt(input);
    if (!output || typeof output.salonDescription !== 'string' || output.salonDescription.trim() === '') {
        throw new Error("AI did not return a valid salon description.");
    }
    return { salonDescription: output.salonDescription };
  }
);
