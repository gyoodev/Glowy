
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview AI agent that generates a compelling salon description.
 *
 * - generateSalonDescription - A function that handles the salon description generation.
 * - GenerateSalonDescriptionInput - The input type for the generateSalonDescription function.
 * - GenerateSalonDescriptionOutput - The return type for the generateSalonDescription function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateSalonDescriptionInputSchema = z.object({
  salonName: z.string().describe('The name of the salon.'),
  serviceDescription: z.string().describe('Detailed description of the salon services.'),
  atmosphereDescription: z.string().describe('Description of the salon atmosphere.'),
  targetCustomerDescription: z.string().describe('Description of the target customer.'),
  uniqueSellingPoints: z.string().describe('Unique selling points of the salon.'),
});
export type GenerateSalonDescriptionInput = z.infer<typeof GenerateSalonDescriptionInputSchema>;

const GenerateSalonDescriptionOutputSchema = z.object({
  salonDescription: z.string().optional().describe('A compelling description of the salon.'),
  error: z.string().optional().describe('An error message if the generation failed.'),
});
export type GenerateSalonDescriptionOutput = z.infer<typeof GenerateSalonDescriptionOutputSchema>;

export async function generateSalonDescription(
  input: GenerateSalonDescriptionInput
): Promise<GenerateSalonDescriptionOutput> {
  try {
    const result = await generateSalonDescriptionFlow(input);
    return { salonDescription: result.salonDescription };
  } catch (e: unknown) {
    console.error("Error in generateSalonDescription flow execution.");
    let errorMessage = "An unexpected error occurred during salon description generation.";

    if (e instanceof Error) {
      console.error("Error Type:", e.name);
      console.error("Error Message:", e.message);
      console.error("Error Stack:", e.stack);
      errorMessage = e.message; // Use the error's message
    } else if (typeof e === 'string') {
      console.error("Error (string):", e);
      errorMessage = e;
    } else {
      console.error("Error (unknown type):", JSON.stringify(e, Object.getOwnPropertyNames(e), 2));
    }
    // Re-throw or return an error object as per contract
    // For now, let's stick to returning an error in the output schema
    return { error: errorMessage }; 
    // If the intention is to always throw, then:
    // if (e instanceof Error) throw e;
    // throw new Error(errorMessage);
  }
}

const prompt = ai.definePrompt({
  name: 'generateSalonDescriptionPrompt',
  input: {schema: GenerateSalonDescriptionInputSchema},
  output: {schema: z.object({ salonDescription: z.string().optional() })}, 
  prompt: `You are an expert marketing copywriter for beauty salons. Your task is to create a compelling and attractive description for a salon based on the information provided.

Salon Name: {{salonName}}
Services: {{serviceDescription}}
Atmosphere: {{atmosphereDescription}}
Target Customer: {{targetCustomerDescription}}
Unique Selling Points: {{uniqueSellingPoints}}

Write a salon description that will attract customers and highlight the unique qualities of the salon. The description should be concise, engaging, and no more than 150 words.
`,
});

const generateSalonDescriptionFlow = ai.defineFlow(
  {
    name: 'generateSalonDescriptionFlow',
    inputSchema: GenerateSalonDescriptionInputSchema,
    outputSchema: z.object({ salonDescription: z.string() }), 
  },
  async (input): Promise<{ salonDescription: string }> => {
    const {output} = await prompt(input);
    if (!output || typeof output.salonDescription !== 'string' || output.salonDescription.trim() === '') {
        throw new Error("AI did not return a valid salon description.");
    }
    return { salonDescription: output.salonDescription };
  }
);
