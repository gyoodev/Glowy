
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requester is an admin
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the requester is a business user
    function isBusinessUser() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'business';
    }

    // Users collection
    match /users/{userId} {
      // Authenticated user can create, read, and update their own profile.
      allow create, read, update: if request.auth != null && request.auth.uid == userId;

      // Admin capabilities for user documents:
      // Admins can get any user document, list all users,
      // create user documents (e.g., if a Firebase Function only handles Auth user creation),
      // update any user document (e.g., to change a role),
      // and delete any user document from Firestore. (Auth user deletion is separate via Admin SDK).
      allow get, list, create, update, delete: if isAdmin();
    }

    // Salons collection
    match /salons/{salonId} {
      allow get, list: if true; // Anyone can read salon information
      allow create: if (
                        request.auth != null &&
                        request.auth.uid == request.resource.data.ownerId &&
                        isBusinessUser()
                      ) || isAdmin();
      allow update: if (
                        request.auth != null &&
                        resource.data.ownerId == request.auth.uid &&
                        isBusinessUser()
                      ) || isAdmin();
      allow delete: if isAdmin();
    }

    // Bookings collection
    match /bookings/{bookingId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if (request.auth != null && request.auth.uid == resource.data.userId) ||
                  (request.auth != null && isBusinessUser() && get(/databases/$(database)/documents/salons/$(resource.data.salonId)).data.ownerId == request.auth.uid) ||
                  isAdmin();
      allow update: if ( // Business owner can update status for their salon's bookings
                        request.auth != null &&
                        isBusinessUser() &&
                        get(/databases/$(database)/documents/salons/$(resource.data.salonId)).data.ownerId == request.auth.uid &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])
                      ) || isAdmin(); // Admins can update anything
      allow list: if isAdmin(); // Only admins can list all bookings broadly
      allow delete: if false; // Or if isAdmin(); if admins should be able to delete
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow get, list: if true; // Allow anyone to read reviews
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if (
                                request.auth != null &&
                                resource.data.userId == request.auth.uid
                              ) || isAdmin();
    }

    // Contacts collection
    match /contacts/{contactId} {
      allow create: if true; // Allow anyone to submit
      allow get, list, update, delete: if isAdmin();
    }

    // NewsletterSubscribers collection
    match /newsletterSubscribers/{subscriberId} {
      allow create: if true; // Allow anyone to create (subscribe)
      allow get, list: if isAdmin(); // Only admins can read the list of subscribers
      allow delete: if isAdmin(); // Admins can delete subscribers
      allow update: if false; // Updates are generally not needed by clients for subscribers
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId; // User can read/update their own
      allow create: if request.auth != null; // Authenticated users can create (e.g., for other users)
      allow delete: if isAdmin();
    }

    // promotionsPayments collection (for admin dashboard charts)
    match /promotionsPayments/{paymentId} {
      allow get, list: if isAdmin(); // Admins can read payment data
      // Create/update/delete for payments should ideally be server-side (e.g., via PayPal API route)
      allow create, update, delete: if false; // Or if isAdmin() if manual admin management is needed
    }

    // Counters collection
    match /counters/users {
      // Allow authenticated users to read and write the user counter.
      // WARNING: Still not secure for production - use Cloud Functions instead.
      allow read, write: if request.auth != null;
    }
  }
}
